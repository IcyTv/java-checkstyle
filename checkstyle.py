import argparse
import requests, base64
import os.path, os, pathlib
import re, sys
import datetime


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[34m"
    OKCYAN = "\033[36m"
    OKGREEN = "\033[32m"
    WARNING = "\033[33m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


pathname = os.path.dirname(sys.argv[0])
path = os.path.abspath(pathname)

parser = argparse.ArgumentParser()

parser.add_argument(
    "-c",
    "--checkstyle",
    help="Path of the checkstyle file",
    action="store",
    required=True,
    type=str,
)

parser.add_argument(
    "-f",
    "--file",
    help="Path of the file to be checkstyled",
    action="store",
    required=True,
    type=str,
)

parser.add_argument(
    "--jar", help="Path to checkstyle jar", action="store", required=False, type=str
)

args = parser.parse_args()


def download_file(url):
    local_filename = path + "/" + url.split("/")[-1]
    # NOTE the stream=True parameter below
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                # If you have chunk encoded response uncomment if
                # and set chunk_size parameter to None.
                # if chunk:
                f.write(chunk)
    return local_filename


def insert(source_str, insert_str, pos):
    return source_str[:pos] + insert_str + source_str[pos:]


jar = ""
if args.jar == None:
    date = None
    if os.path.exists(path + "/checkstyle.conf"):
        with open(path + "/checkstyle.conf") as f:
            for l in f.readlines():
                if l.startswith("name="):
                    name = l.split("=")[-1].replace("\n", "")
                elif l.startswith("date="):
                    date = l.split("=")[-1]
                elif l.startswith("#"):
                    pass
                else:
                    print(
                        "Invalid configuration option found! Please don't edit as this is auto generated!!"
                    )

    check = False
    if date == None or datetime.date.fromisoformat(date) < datetime.date.today():
        check = True

    if check:
        print("Downloading latest checkstyle")
        r = requests.get(
            "https://api.github.com/repos/checkstyle/checkstyle/releases/latest",
            headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
            },
        ).json()
        name = r["assets"][0]["name"]
    else:
        print("Found local config")
    if not os.path.exists(path + "/" + name) and check:
        print(
            bcolors.OKGREEN
            + "Downloading"
            + bcolors.UNDERLINE
            + r["assets"][0]["browser_download_url"]
            + bcolors.ENDC
        )
        download_file(r["assets"][0]["browser_download_url"])
        jar = path + "/" + name
    else:
        print(bcolors.OKGREEN + "Using " + name + bcolors.ENDC)
        jar = path + "/" + name

    with open(path + "/checkstyle.conf", "w") as f:
        f.write(
            "#This is an autogenerated file, please do not edit\nname=%s\ndate=%s"
            % (name, datetime.date.today().isoformat())
        )
else:
    jar = args.jar

checkstyle = str(pathlib.Path(args.checkstyle).absolute())
javaFile = str(pathlib.Path(args.file).absolute())
jarPath = str(pathlib.Path(jar).absolute())

output = str(os.popen("java -jar %s -c %s %s" % (jarPath, checkstyle, javaFile)).read())

for i in output.split("\n"):
    if i.startswith("[WARN]"):
        print(
            bcolors.WARNING
            + i[:7]
            + bcolors.OKBLUE
            + bcolors.UNDERLINE
            + i[7:].split(" ")[0]
            + bcolors.ENDC
            + bcolors.OKCYAN
            + " "
            + " ".join(i[7:].split(" ")[1:])
            + bcolors.ENDC
        )
    elif i.startswith("Starting audit") or i.startswith("Audit done"):
        print(bcolors.OKGREEN + i + bcolors.ENDC)
    elif i.startswith("Error"):
        print(bcolors.FAIL + i + bcolors.ENDC)
    else:
        print(i)

# print(output)

